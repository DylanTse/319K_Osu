


ARM Macro Assembler    Page 1 


    1 00000000         ; StringConversion.s
    2 00000000         ; Student names: Dylan Tse, Pranav Kopparthy
    3 00000000         ; Last modification date: 3/5/23
    4 00000000         ; Runs on TM4C123
    5 00000000         ; ECE319K lab 7 number to string conversions
    6 00000000         ;
    7 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
    8 00000000         
    9 00000000         
   10 00000000                 EXPORT           Dec2String
   11 00000000                 EXPORT           Fix2String
   12 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   13 00000000                 THUMB
   14 00000000                 PRESERVE8
   15 00000000         
   16 00000000         
   17 00000000         ;-----------------------Dec2String----------------------
                       -
   18 00000000         ; Convert a 32-bit number into unsigned decimal format
   19 00000000         ; String the string into the empty array add null-termin
                       ation
   20 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   21 00000000         ;        R1 pointer to empty array
   22 00000000         ; Output: none
   23 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   24 00000000         
   25 00000000         ; EQU says how many places away from the frame pointer
   26 00000000 00000000 
                       num     EQU              0           ; save R0 value
   27 00000000 00000004 
                       arrPt   EQU              4           ; save R1 value
   28 00000000        B 
                       fp      RN               11
   29 00000000         
   30 00000000         Dec2String
   31 00000000 E92D 4800       PUSH             {R11, LR}
   32 00000004         ; for stack alignment, alloc 4 bytes of mem just to keep
                        it aligned, 3 bytes unused
   33 00000004 B082            SUB              SP, #8      ; so would change: 
                                                            4, 8, 12, 16... bas
                                                            ed on # of local va
                                                            rs
   34 00000006 46EB            MOV              fp, SP      ; Rll = SP
   35 00000008 F8CB 0000       STR              R0, [fp, #num]
   36 0000000C F8CB 1004       STR              R1, [fp, #arrPt]
   37 00000010         
   38 00000010 F04F 0000       MOV              R0, #0
   39 00000014 B401            PUSH             {R0}        ; this will be our 
                                                            null term. for Stri
                                                            ng and to know when
                                                             to stop popping to
                                                             Arr
   40 00000016         
   41 00000016 F8DB 0000       LDR              R0, [fp, #num]
   42 0000001A F04F 010A       MOV              R1, #10
   43 0000001E         loopPushDigit



ARM Macro Assembler    Page 2 


   44 0000001E F000 F85D       BL               Mod         ; R0 will now conta
                                                            in LSD (least signi
                                                            ficant digit)
   45 00000022 F100 0030       ADD              R0, #0x30   ; convert digit to 
                                                            ASCII representatio
                                                            n
   46 00000026 B401            PUSH             {R0}        ; store ASCII digit
                                                             on stack
   47 00000028         
   48 00000028 F8DB 0000       LDR              R0, [fp, #num] ; update val by 
                                                            dividing by 10
   49 0000002C FBB0 F0F1       UDIV             R0, R1
   50 00000030 F8CB 0000       STR              R0, [fp, #num]
   51 00000034         
   52 00000034 2800            CMP              R0, #0
   53 00000036 D1F2            BNE              loopPushDigit
   54 00000038         
   55 00000038         loopMoveToArr
   56 00000038 BC01            POP              {R0}
   57 0000003A F8DB 1004       LDR              R1, [fp, #arrPt] ; R1 = pointer
                                                             to array to use to
                                                             put stuff in array
                                                            
   58 0000003E 7008            STRB             R0, [R1]
   59 00000040 F101 0101       ADD              R1, #1
   60 00000044 F8CB 1004       STR              R1, [fp, #arrPt]
   61 00000048 2800            CMP              R0, #0
   62 0000004A D1F5            BNE              loopMoveToArr
   63 0000004C         
   64 0000004C B002            ADD              SP, #8      ; dealloc space, er
                                                            ror otherwise bc im
                                                            balanced stack
   65 0000004E E8BD 4800       POP              {R11, LR}
   66 00000052 4770            BX               LR
   67 00000054         ;* * * * * * * * End of Dec2String * * * * * * * *
   68 00000054         
   69 00000054         
   70 00000054         
   71 00000054         ; -----------------------Fix2String---------------------
                       -
   72 00000054         ; Create characters for LCD display in fixed-point forma
                       t
   73 00000054         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   74 00000054         ; Inputs:  R0 is an unsigned 32-bit number
   75 00000054         ;          R1 pointer to empty array
   76 00000054         ; Outputs: none
   77 00000054         ; E.g., R0=0,    then create "0.000 "
   78 00000054         ;       R0=3,    then create "0.003 "
   79 00000054         ;       R0=89,   then create "0.089 "
   80 00000054         ;       R0=123,  then create "0.123 "
   81 00000054         ;       R0=9999, then create "9.999 "
   82 00000054         ;       R0>9999, then create "*.***"
   83 00000054         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   84 00000054 00000000 
                       val     EQU              0
   85 00000054 00000004 
                       ptArr   EQU              4



ARM Macro Assembler    Page 3 


   86 00000054        B 
                       ptFrame RN               11
   87 00000054         
   88 00000054         Fix2String
   89 00000054 E92D 4800       PUSH             {R11, LR}
   90 00000058 B082            SUB              SP, #8
   91 0000005A 46EB            MOV              ptFrame, SP
   92 0000005C F8CB 0000       STR              R0, [ptFrame, #val]
   93 00000060 F8CB 1004       STR              R1, [ptFrame, #ptArr]
   94 00000064         
   95 00000064 F242 720F       MOV              R2, #9999
   96 00000068 4290            CMP              R0, R2
   97 0000006A D90C            BLS              regFix      ; for any value tha
                                                            t is less than or e
                                                            qual to (unsigned)[
                                                            BLS] --> go to regF
                                                            ix instead
   98 0000006C F04F 022A       MOV              R2, #0x2A   ; "*"
   99 00000070 F04F 032E       MOV              R3, #0x2E   ; "."
  100 00000074 700A            STRB             R2, [R1]    ; "*"
  101 00000076 704B            STRB             R3, [R1, #1] ; "."
  102 00000078 708A            STRB             R2, [R1, #2] ; "*"
  103 0000007A 70CA            STRB             R2, [R1, #3] ; "*"
  104 0000007C 710A            STRB             R2, [R1, #4] ; "*"
  105 0000007E F04F 0200       MOV              R2, #0x0
  106 00000082 714A            STRB             R2, [R1, #5] ; "null"
  107 00000084 E026            B                doneFix
  108 00000086         
  109 00000086         regFix
  110 00000086 F04F 0220       MOV              R2, #0x20   ; "space" <-- every
                                                             fixPoint has to ha
                                                            ve space at end
  111 0000008A F04F 0300       MOV              R3, #0x0    ; "null"
  112 0000008E B40C            PUSH             {R2, R3}
  113 00000090         
  114 00000090 F04F 010A       MOV              R1, #10
  115 00000094 F04F 0304       MOV              R3, #4      ; R3 serves as coun
                                                            ter for how many ti
                                                            mes to push a digit
                                                             since it is fixed 
                                                            at 4 digit precisio
                                                            n
  116 00000098         loopPushFix
  117 00000098 F000 F820       BL               Mod         ; after Mod: R0 now
                                                             contains LSD, R1 c
                                                            ontains 10
  118 0000009C         
  119 0000009C         ; insert a "." once there is only digit left aka R3 == 1
                       
  120 0000009C 2B01            CMP              R3, #1
  121 0000009E D104            BNE              resumePushFix
  122 000000A0 F04F 012E       MOV              R1, #0x2E   ; "."
  123 000000A4 B402            PUSH             {R1}
  124 000000A6 F04F 010A       MOV              R1, #10
  125 000000AA         
  126 000000AA         resumePushFix
  127 000000AA F100 0030       ADD              R0, #0x30   ; turn LSD to ASCII
                                                             rep
  128 000000AE B401            PUSH             {R0}



ARM Macro Assembler    Page 4 


  129 000000B0         
  130 000000B0 F8DB 0000       LDR              R0, [ptFrame, #val] ; update va
                                                            l by dividing by 10
                                                            
  131 000000B4 FBB0 F0F1       UDIV             R0, R1
  132 000000B8 F8CB 0000       STR              R0, [ptFrame, #val]
  133 000000BC         
  134 000000BC 3B01            SUBS             R3, #1
  135 000000BE D1EB            BNE              loopPushFix
  136 000000C0         
  137 000000C0         loopArrFix
  138 000000C0 BC01            POP              {R0}
  139 000000C2 F8DB 1004       LDR              R1, [ptFrame, #ptArr]
  140 000000C6 7008            STRB             R0, [R1]
  141 000000C8 F101 0101       ADD              R1, #1
  142 000000CC F8CB 1004       STR              R1, [ptFrame, #ptArr]
  143 000000D0 2800            CMP              R0, #0
  144 000000D2 D1F5            BNE              loopArrFix
  145 000000D4         
  146 000000D4         doneFix
  147 000000D4 B002            ADD              SP, #8      ; dealloc memory
  148 000000D6 E8BD 4800       POP              {R11, LR}
  149 000000DA 4770            BX               LR
  150 000000DC         
  151 000000DC         
  152 000000DC         
  153 000000DC         ; Written by Dylan Tse
  154 000000DC         ; performs the modulo operation, gives remainder from in
                       teger division operation
  155 000000DC         ; Inputs: R0 is an unsigned 32-bit number
  156 000000DC         ;    R1 is an unsigned 32-bit number that R0 will be div
                       ided by
  157 000000DC         ; Outputs: R0 as a remainder of R0/R1
  158 000000DC         Mod
  159 000000DC B410            PUSH             {R4}
  160 000000DE FBB0 F4F1       UDIV             R4, R0, R1
  161 000000E2 FB04 F401       MUL              R4, R1
  162 000000E6 EBA0 0004       SUB              R0, R0, R4
  163 000000EA BC10            POP              {R4}
  164 000000EC 4770            BX               LR
  165 000000EE         
  166 000000EE         
  167 000000EE         
  168 000000EE 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  169 000000F0                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\stringconversion.d -o.\stringconversion.o -I.\RTE\_Osu -IC:\
Users\Dylan\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Use
rs\Dylan\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --p
redefine="__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="T
M4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\stringconversion.lst ..
\inc\StringConversion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 12 in file ..\inc\StringConversion.s
   Uses
      None
Comment: .text unused
Dec2String 00000000

Symbol: Dec2String
   Definitions
      At line 30 in file ..\inc\StringConversion.s
   Uses
      At line 10 in file ..\inc\StringConversion.s
Comment: Dec2String used once
Fix2String 00000054

Symbol: Fix2String
   Definitions
      At line 88 in file ..\inc\StringConversion.s
   Uses
      At line 11 in file ..\inc\StringConversion.s
Comment: Fix2String used once
Mod 000000DC

Symbol: Mod
   Definitions
      At line 158 in file ..\inc\StringConversion.s
   Uses
      At line 44 in file ..\inc\StringConversion.s
      At line 117 in file ..\inc\StringConversion.s

doneFix 000000D4

Symbol: doneFix
   Definitions
      At line 146 in file ..\inc\StringConversion.s
   Uses
      At line 107 in file ..\inc\StringConversion.s
Comment: doneFix used once
loopArrFix 000000C0

Symbol: loopArrFix
   Definitions
      At line 137 in file ..\inc\StringConversion.s
   Uses
      At line 144 in file ..\inc\StringConversion.s
Comment: loopArrFix used once
loopMoveToArr 00000038

Symbol: loopMoveToArr
   Definitions
      At line 55 in file ..\inc\StringConversion.s
   Uses
      At line 62 in file ..\inc\StringConversion.s
Comment: loopMoveToArr used once
loopPushDigit 0000001E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: loopPushDigit
   Definitions
      At line 43 in file ..\inc\StringConversion.s
   Uses
      At line 53 in file ..\inc\StringConversion.s
Comment: loopPushDigit used once
loopPushFix 00000098

Symbol: loopPushFix
   Definitions
      At line 116 in file ..\inc\StringConversion.s
   Uses
      At line 135 in file ..\inc\StringConversion.s
Comment: loopPushFix used once
regFix 00000086

Symbol: regFix
   Definitions
      At line 109 in file ..\inc\StringConversion.s
   Uses
      At line 97 in file ..\inc\StringConversion.s
Comment: regFix used once
resumePushFix 000000AA

Symbol: resumePushFix
   Definitions
      At line 126 in file ..\inc\StringConversion.s
   Uses
      At line 121 in file ..\inc\StringConversion.s
Comment: resumePushFix used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

arrPt 00000004

Symbol: arrPt
   Definitions
      At line 27 in file ..\inc\StringConversion.s
   Uses
      At line 36 in file ..\inc\StringConversion.s
      At line 57 in file ..\inc\StringConversion.s
      At line 60 in file ..\inc\StringConversion.s

num 00000000

Symbol: num
   Definitions
      At line 26 in file ..\inc\StringConversion.s
   Uses
      At line 35 in file ..\inc\StringConversion.s
      At line 41 in file ..\inc\StringConversion.s
      At line 48 in file ..\inc\StringConversion.s
      At line 50 in file ..\inc\StringConversion.s

ptArr 00000004

Symbol: ptArr
   Definitions
      At line 85 in file ..\inc\StringConversion.s
   Uses
      At line 93 in file ..\inc\StringConversion.s
      At line 139 in file ..\inc\StringConversion.s
      At line 142 in file ..\inc\StringConversion.s

val 00000000

Symbol: val
   Definitions
      At line 84 in file ..\inc\StringConversion.s
   Uses
      At line 92 in file ..\inc\StringConversion.s
      At line 130 in file ..\inc\StringConversion.s
      At line 132 in file ..\inc\StringConversion.s

4 symbols
349 symbols in table
